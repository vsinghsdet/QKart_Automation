/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use TestNG for testing
    testImplementation 'org.testng:testng:7.11.0'

    // Selenium Java
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.31.0'

    // WebDriverManager
    testImplementation 'io.github.bonigarcia:webdrivermanager:6.0.1'

    // Guava (example version â€” update if needed)
    implementation 'com.google.guava:guava:32.1.2-jre'

    // https://mvnrepository.com/artifact/org.apache.poi/poi
    testImplementation group: 'org.apache.poi', name: 'poi', version: '5.4.1'

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    testImplementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.4.1'

    // https://mvnrepository.com/artifact/com.aventstack/extentreports
    testImplementation group: 'com.aventstack', name: 'extentreports', version: '5.1.2'
}

test {
    useTestNG {
        useDefaultListeners = true
        suites "src/test/resources/testng.xml"
    }
    afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTEST RESULT: ${result.resultType}"
                println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
                        "${result.successfulTestCount} SUCCEEDED, " +
                        "${result.failedTestCount} FAILED, " +
                        "${result.skippedTestCount} SKIPPED"
            }
    }
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }

    outputs.upToDateWhen { false }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'qkart_automation.App'
}
